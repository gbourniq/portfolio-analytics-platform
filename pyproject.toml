[tool.poetry]
name = "portfolio_analytics"
version = "0.2.0"
description = "A Python project to analyse a portfolio given positions and market data."
authors = ["Guillaume Bournique <guillaume.bournique@gmail.com>"]
readme = "README.md"
package-mode = true
packages = [{ include = "portfolio_analytics" }]


[tool.poetry.dependencies]
python = ">=3.12,<3.13"
numpy = "2.2.0"
openpyxl = "^3.1.5"
pandas = "^2.2.3"
pyarrow = "^18.1.0"
tomli = "^2.2.1"


[tool.poetry.group.api.dependencies]
fastapi = "^0.115.6"
python-multipart = "^0.0.19"
yfinance = "^0.2.50"
uvicorn = "^0.34.0"


[tool.poetry.group.dashboard.dependencies]
dash = "^2.18.2"
dash-bootstrap-components = "^1.6.0"
plotly = "^5.24.1"
gunicorn = "^23.0.0"


[tool.poetry.group.dev.dependencies]
autoflake = "^2.3.1"
black = "^24.10.0"
coverage = "^7.6.3"
flake8 = "^7.1.1"
isort = "^5.13.2"
jupyter = "^1.1.1"
matplotlib = "^3.9.3"
mypy = "^1.12.0"
pandas-stubs = "^2.2.3.241126"
pylint = "^3.3.4"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
python-semantic-release = "7.34.6"
ruff = "^0.7.0"
types-requests = "^2.32.0.20241016"
tomli-w = "^1.1.0"
dash = {extras = ["testing"], version = "^2.18.2"}


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ruff
[tool.ruff]
line-length = 89


# pylint
[tool.pylint]
disable = [
    "logging-fstring-interpolation",
    "use-dict-literal",
    "redefined-outer-name",
    "protected-access",
    "missing-module-docstring",
    "too-many-arguments",
    "too-many-positional-arguments",
]

[tool.pylint."SIMILARITIES"]
min-similarity-lines = 20
ignore-comments = true
ignore-imports = true


# mypy
[tool.mypy]
plugins = [
    "numpy.typing.mypy_plugin"
]

[[tool.mypy.overrides]]
module = [
    "dash.*",
    "dash_bootstrap_components.*",
    "plotly.*",
    "yfinance.*"
]
ignore_missing_imports = true


# coverage
[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError:",
    "if TYPE_CHECKING:"
]
fail_under = 0


# semantic-release
[tool.semantic_release]
branch = "master"
version_toml = "pyproject.toml:tool.poetry.version"
tag_commit = true
commit_subject = "{version}"
commit_message = "Automatically generated by python-semantic-release [skip ci]"
upload_to_repository = false
upload_to_release = false
build_command = false


[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "api_integration: marks tests as API integration tests",
    "dashboard_integration: marks tests as dashboard integration tests"
]
